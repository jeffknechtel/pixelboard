#include <MemoryFree.h>
#include <Adafruit_GFX.h>   // Core graphics library
#include <RGBmatrixPanel.h> // Hardware-specific library

#define CLK 11
#define LAT A3
#define OE  9
#define A   A0
#define B   A1
#define C   A2

#define CMD_SIZE 512
#define MAX_ELEMENTS 24
#define DEBUG 0

//Esi
uint16_t logo1 [] = {
0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
0x0000,0x4385,0x6D47,0x75A7,0x7E08,0x7E08,0x7E08,0x7E08,0x7E08,0x7E08,0x7E08,0x7E08,0x75A7,0x5CA6,0x75E8,0x0000,
0x0000,0x13D0,0x6527,0x7DE8,0x7E08,0x7E08,0x7E08,0x7E08,0x7E08,0x7E08,0x7DE8,0x64C6,0x3AE4,0x5C66,0x7E08,0x0000,
0x0000,0x0332,0x0A2A,0x53E5,0x7DE8,0x7E08,0x7E08,0x7E08,0x7E08,0x7E08,0x5C45,0x21C2,0x4384,0x7E08,0x7E08,0x0000,
0x0000,0x0352,0x02F0,0x0125,0x3283,0x7E08,0x7E08,0x7E08,0x7E08,0x5405,0x1101,0x32A3,0x75E8,0x7E08,0x7E08,0x0000,
0x0000,0x0352,0x0352,0x02AE,0x0082,0x1982,0x7567,0x7E08,0x4B84,0x0040,0x2A23,0x7587,0x7E08,0x7E08,0x7E08,0x0000,
0x0000,0x0352,0x0352,0x0352,0x020C,0x0020,0x1982,0x29E2,0x0860,0x1982,0x6D27,0x7E08,0x7E08,0x7E08,0x7E08,0x0000,
0x0000,0x0352,0x0352,0x0352,0x0332,0x0149,0x0040,0x0000,0x10C1,0x5425,0x7E08,0x7E08,0x7E08,0x7E08,0x7E08,0x0000,
0x0000,0x0352,0x0352,0x0352,0x0352,0x0188,0x0000,0x0000,0x08A1,0x64C5,0x7E08,0x7E08,0x7E08,0x7E08,0x7E08,0x0000,
0x0000,0x0352,0x0352,0x0352,0x028E,0x0041,0x0083,0x00C5,0x0000,0x21C3,0x7DA6,0x7E08,0x7E08,0x7E08,0x7E08,0x0000,
0x0000,0x0352,0x0352,0x02D0,0x00A3,0x00C4,0x024C,0x02CF,0x0149,0x0041,0x3284,0x8606,0x7E08,0x7E08,0x7E08,0x0000,
0x0000,0x0352,0x0310,0x0188,0x00C4,0x02D0,0x0352,0x0352,0x0352,0x016A,0x0082,0x3B45,0x8627,0x7E08,0x7E08,0x0000,
0x0000,0x0352,0x024D,0x0126,0x0352,0x0352,0x0352,0x0352,0x0352,0x0352,0x018A,0x00C3,0x5C86,0x7E08,0x7E08,0x0000,
0x0000,0x0352,0x020B,0x0352,0x0352,0x0352,0x0352,0x0352,0x0352,0x0352,0x0352,0x026D,0x1165,0x75A7,0x7E08,0x0000,
0x0000,0x02F0,0x0352,0x0352,0x0352,0x0352,0x0352,0x0352,0x0352,0x0352,0x0352,0x0332,0x02CE,0x22A7,0x7E08,0x0000,
0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000  
};

//Scotia
uint16_t logo2 [] = {
0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
0x0000,0xC800,0xC800,0xC800,0xC800,0xC800,0xC000,0xC000,0xB800,0xC000,0xC000,0xC000,0xB800,0xC800,0xC800,0x0000,
0x0000,0xC800,0xC800,0xC800,0xC800,0xC000,0xC841,0xE410,0xEC10,0xE410,0xE410,0xE3EF,0xF575,0xDA28,0xC800,0x0000,
0x0000,0xC800,0xC800,0xC800,0xC000,0xE2EB,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xC800,0xC800,0x0000,
0x0000,0xC800,0xC800,0xC000,0xC841,0xFFFF,0xFFFF,0xF659,0xF5F7,0xF555,0xF638,0xF638,0xC000,0xC800,0xC800,0x0000,
0x0000,0xC800,0xC800,0xC000,0xED14,0xFFFF,0xF5D7,0xF596,0xED14,0xF659,0xB800,0xB800,0xC800,0xC800,0xC800,0x0000,
0x0000,0xC800,0xC800,0xC000,0xF575,0xF679,0xED55,0xECB2,0xF638,0xF5B6,0xF69A,0xC000,0xC800,0xC800,0xC800,0x0000,
0x0000,0xC800,0xC800,0xC000,0xD1A6,0xFFDF,0xF659,0xFF3C,0xFFFF,0xF575,0xFFFF,0xD0E3,0xC000,0xC800,0xC800,0x0000,
0x0000,0xC800,0xC800,0xC800,0xC000,0xFF5D,0xF638,0xF69A,0xFF5D,0xED34,0xFFFF,0xEC92,0xC000,0xC800,0xC800,0x0000,
0x0000,0xC800,0xC800,0xC800,0xC000,0xDA8A,0xFFFF,0xECD3,0xF679,0xECD3,0xED34,0xFFFF,0xC800,0xC800,0xC800,0x0000,
0x0000,0xC800,0xC800,0xC800,0xC000,0xB000,0xE32C,0xF69A,0xECF3,0xF618,0xF6BA,0xFFFF,0xC000,0xC800,0xC800,0x0000,
0x0000,0xC800,0xC800,0xB800,0xE30C,0xFF3C,0xED34,0xF5D7,0xF5B6,0xFFFF,0xFFFF,0xED14,0xC000,0xC800,0xC800,0x0000,
0x0000,0xC800,0xC000,0xECF3,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFF1C,0xC000,0xC800,0xC800,0xC800,0x0000,
0x0000,0xC800,0xC841,0xF5D7,0xE430,0xE410,0xE410,0xE410,0xEC51,0xDA08,0xC000,0xC800,0xC800,0xC800,0xC800,0x0000,
0x0000,0xC800,0xC800,0xC000,0xB800,0xC000,0xC000,0xC000,0xB800,0xC000,0xC800,0xC800,0xC800,0xC800,0xC800,0x0000,
0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000
};

//Esso
uint16_t logo3 [] = {
0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
0x0000,0x0000,0x0000,0xFFDF,0xD6FD,0x95BA,0x64B8,0x4C57,0x4C57,0x64B8,0x8D9A,0xCEFD,0xF7DF,0xFFFF,0x0000,0x0000,
0x0000,0xFFFF,0xD71D,0x64B8,0x2355,0x33B6,0x5C98,0x7519,0x7519,0x5CB8,0x33D6,0x1B55,0x5477,0xD73D,0xFFFF,0x0000,
0xFFFF,0xD6FD,0x2B95,0x3417,0xAE9D,0xEF9E,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xEF9E,0xB6DD,0x3C37,0x1B34,0xC6DD,0xFFFF,
0xEF9E,0x3BD6,0x4437,0xEC52,0xFA8B,0xFE38,0xFF7D,0xFF9E,0xFFDF,0xFF3C,0xFFFF,0xFFBE,0xF75D,0x5498,0x2B95,0xE77E,
0xA61B,0x1B75,0xDF7E,0xFAEC,0xF2CD,0xFD76,0xEA2A,0xF452,0xF36F,0xF2CD,0xF515,0xF24B,0xFB4E,0xCEBC,0x1B76,0x9DFB,
0x7D39,0x3C17,0xFFFF,0xF2CC,0xEA6B,0xFD56,0xEA0A,0xF3F0,0xF34E,0xF2CC,0xF28C,0xF452,0xFAAC,0xEDF8,0x3438,0x8D7A,
0x9DFB,0x1B76,0xE73D,0xFB0D,0xEA6B,0xF556,0xF2ED,0xF24B,0xF452,0xE9E9,0xF36F,0xF28C,0xFAED,0xCE3A,0x1B75,0xAE3B,
0xE77E,0x2B95,0x5498,0xF75D,0xFDB6,0xFE7A,0xFDB7,0xFEFB,0xFE39,0xFE18,0xFFFF,0xFE18,0xEE7A,0x4437,0x3BD6,0xEF9F,
0xFFFF,0xC6BD,0x1B34,0x3C37,0xB6DD,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xF7DF,0xAE9D,0x3417,0x2B95,0xD71D,0xFFFF,
0x0000,0xFFFF,0xD71D,0x5477,0x1B55,0x33D6,0x5CB8,0x7519,0x7519,0x5C98,0x33B6,0x2355,0x64B8,0xD71D,0xFFDF,0x0000,
0x0000,0x0000,0xF7BF,0xE79E,0xCEFD,0x8D9A,0x5CB8,0x4C57,0x4C57,0x64B8,0x95BA,0xD71D,0xFFFF,0x0000,0x0000,0x0000,
0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000
};

//Sobeys
uint16_t logo4 [] = {
0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xFFFF,0xAEF7,0x554E,0x2448,0x2448,0x0000,
0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xBEF9,0x344A,0x2448,0x2448,0x2448,0x2448,0x0000,
0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x8DD3,0x2448,0x2448,0x2448,0x2448,0x2448,0x2448,0x0000,
0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xAE75,0x2448,0x2448,0x2448,0x2448,0x2448,0x2448,0x44CA,0x0000,
0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xEF7D,0x2448,0x2448,0x2448,0x2448,0x2448,0x654E,0xDF7B,0x0000,0x0000,
0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x75D1,0x2448,0x2448,0x2448,0x2448,0xAEF7,0x0000,0x0000,0x0000,0x0000,
0x0000,0x0000,0x0000,0x0000,0x0000,0xFFFF,0x2448,0x2448,0x2448,0x2448,0x9E75,0x0000,0x0000,0x0000,0x0000,0x0000,
0x0000,0x0000,0x0000,0x0000,0x0000,0xCF7B,0x2448,0x2448,0x2448,0x344A,0xFFFF,0x0000,0x0000,0x0000,0x0000,0x0000,
0x0000,0x0000,0x0000,0x0000,0x0000,0x8DD3,0x2448,0x2448,0x2448,0x75D1,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
0x0000,0x0000,0x0000,0x0000,0xFFFF,0x44CA,0x2448,0x2448,0x2448,0xAEF7,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
0x0000,0x0000,0x0000,0x0000,0x75D1,0x2448,0x2448,0x2448,0x2448,0xEF7D,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
0x0000,0x0000,0xEF7D,0x654E,0x2448,0x2448,0x2448,0x2448,0x654E,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
0x0000,0x2448,0x2448,0x2448,0x2448,0x2448,0x2448,0x344A,0xEF7D,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
0x0000,0x2448,0x2448,0x2448,0x2448,0x2448,0x2448,0xAEF7,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
0x0000,0x2448,0x2448,0x2448,0x2448,0x344A,0xAEF7,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
0x0000,0x2448,0x2448,0x44CA,0x8DD3,0xFFFF,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000
};

//Arduino
uint16_t logo5 [] = {
0x0000,0x0000,0x0000,0x0000,0x03CF,0x04B3,0x04B3,0x04B3,0x04B3,0x04B3,0x04B3,0x03CF,0x0000,0x0000,0x0000,0x0000,
0x0000,0x0000,0x0000,0x04B3,0x04B3,0x04B3,0x04B3,0x04B3,0x04B3,0x04B3,0x04B3,0x04B3,0x04B3,0x0000,0x0000,0x0000,
0x0000,0x0000,0x04B3,0x04B3,0x04B3,0x04B3,0x04B3,0x04B3,0x04B3,0x04B3,0x04B3,0x04B3,0x04B3,0x04B3,0x0000,0x0000,
0x0000,0x04B3,0x04B3,0x04B3,0x04B3,0x04B3,0x04B3,0x04B3,0x04B3,0x04B3,0x04B3,0x04B3,0x04B3,0x04B3,0x04B3,0x0000,
0x03CF,0x04B3,0x04B3,0x3555,0x4596,0x3555,0x04B3,0x04B3,0x04B3,0x04B3,0x3555,0x4596,0x3555,0x04B3,0x04B3,0x03CF,
0x04B3,0x04B3,0x9EDB,0xFFFF,0xFFFF,0xFFFF,0xBF3C,0x14F4,0x14F4,0xBF3C,0xFFFF,0xFFFF,0xFFFF,0xAEFC,0x04B3,0x04B3,
0x04B3,0x8659,0xFFFF,0x04B3,0x04B3,0x04B3,0xFFFF,0xBF3C,0xBF3C,0xFFFF,0x04B3,0x04B3,0x04B3,0xFFFF,0x8659,0x04B3,
0x04B3,0xEFDF,0x04B3,0x04B3,0x04B3,0x04B3,0x04B3,0xFFFF,0xFFFF,0x04B3,0x04B3,0xFFFF,0x04B3,0x04B3,0xEFDF,0x04B3,
0x04B3,0xFFFF,0x04B3,0xFFFF,0xFFFF,0xFFFF,0x04B3,0xFFFF,0xFFFF,0x04B3,0xFFFF,0xFFFF,0xFFFF,0x04B3,0xFFFF,0x04B3,
0x04B3,0xDF9E,0x04B3,0x04B3,0x04B3,0x04B3,0x04B3,0xFFFF,0xFFFF,0x04B3,0x04B3,0xFFFF,0x04B3,0x04B3,0xEFDF,0x04B3,
0x04B3,0x8659,0xFFFF,0x04B3,0x04B3,0x04B3,0xFFFF,0xBF3C,0xBF3C,0xFFFF,0x04B3,0x04B3,0x04B3,0xFFFF,0x8659,0x04B3,
0x03CF,0x04B3,0x9EDB,0xFFFF,0xFFFF,0xFFFF,0xBF3C,0x14F4,0x14F4,0xBF3C,0xFFFF,0xFFFF,0xFFFF,0xAEFC,0x04B3,0x03CF,
0x0000,0x04B3,0x04B3,0x3555,0x4596,0x3555,0x04B3,0x04B3,0x04B3,0x04B3,0x3555,0x4596,0x3555,0x04B3,0x04B3,0x0000,
0x0000,0x0000,0x04B3,0x04B3,0x04B3,0x04B3,0x04B3,0x04B3,0x04B3,0x04B3,0x04B3,0x04B3,0x04B3,0x04B3,0x0000,0x0000,
0x0000,0x0000,0x0000,0x04B3,0x04B3,0x04B3,0x04B3,0x04B3,0x04B3,0x04B3,0x04B3,0x04B3,0x04B3,0x0000,0x0000,0x0000,
0x0000,0x0000,0x0000,0x0000,0x03CF,0x04B3,0x04B3,0x04B3,0x04B3,0x04B3,0x04B3,0x03CF,0x0000,0x0000,0x0000,0x0000
};

//Pi
uint16_t logo6 [] = {
0x0000,0x0000,0x0000,0x0000,0x0000,0x0080,0x0020,0x0000,0x0000,0x0000,0x0020,0x0080,0x0020,0x0000,0x0000,0x0000,
0x0000,0x0000,0x0000,0x0920,0x4D00,0x5540,0x5560,0x33A0,0x0000,0x2AE0,0x5560,0x5540,0x4D20,0x1A00,0x0000,0x0000,
0x0000,0x0000,0x0000,0x08E0,0x5E00,0x5540,0x4480,0x55C0,0x11A0,0x5580,0x44A0,0x4D00,0x5E40,0x1A00,0x0000,0x0000,
0x0000,0x0000,0x0000,0x0000,0x3380,0x5E40,0x55C0,0x1A80,0x0020,0x09E0,0x4D60,0x5E40,0x4460,0x0000,0x0000,0x0000,
0x0000,0x0000,0x0000,0x0000,0x0000,0x3280,0x4B20,0x1820,0x4801,0x1800,0x42C0,0x32E0,0x0020,0x0000,0x0000,0x0000,
0x0000,0x0000,0x0000,0x0000,0x3000,0xC806,0x4001,0xB005,0xF829,0xD007,0x5802,0xC806,0x2800,0x0000,0x0000,0x0000,
0x0000,0x0000,0x0000,0x0000,0x9804,0x7003,0x4802,0x7003,0x7003,0x8004,0x6002,0x8004,0x9804,0x0000,0x0000,0x0000,
0x0000,0x0000,0x0000,0x1000,0x2800,0x8804,0xF828,0xE027,0x1800,0xC826,0xF828,0xA005,0x3801,0x1800,0x0000,0x0000,
0x0000,0x0000,0x0000,0xB806,0x7803,0xE027,0xF028,0xF828,0x3801,0xD827,0xF028,0xE828,0x8804,0xC026,0x0000,0x0000,
0x0000,0x0000,0x0000,0xE027,0x3801,0xA005,0xF028,0x9804,0x2800,0x7003,0xE027,0xA805,0x3001,0xD827,0x0000,0x0000,
0x0000,0x0000,0x0000,0x4801,0x4801,0x1000,0x2000,0xA005,0xF028,0xC006,0x2000,0x2800,0x8003,0x4001,0x0000,0x0000,
0x0000,0x0000,0x0000,0x0000,0xE827,0xC826,0x2000,0xF028,0xF028,0xF828,0x5802,0xC826,0xF828,0x1000,0x0000,0x0000,
0x0000,0x0000,0x0000,0x0000,0xA805,0xF829,0x7803,0x7803,0xD827,0x9004,0x7803,0xF829,0xC826,0x0000,0x0000,0x0000,
0x0000,0x0000,0x0000,0x0000,0x0800,0x8004,0x4801,0x4001,0x8003,0x5802,0x4001,0x8804,0x1000,0x0000,0x0000,0x0000,
0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xB826,0xF828,0xC826,0x0800,0x0000,0x0000,0x0000,0x0000,0x0000,
0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x2000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000
};

typedef struct {
  int x;
  int y;  
  uint16_t color;
  uint8_t textSize;
  boolean isPixmap;
  char *data;
  uint16_t *pixmap;
} screenElement ;

screenElement screen[MAX_ELEMENTS];
uint8_t screenElements=0;
int screenWidth=0;

RGBmatrixPanel matrix(A, B, C, CLK, LAT, OE, true);

int   scrollX   = matrix.width();
int32_t   previousTime = 0;

uint16_t  hue     = 0;
       
uint8_t   scrollSpeed = 25;

boolean doneScroll=true;

char  input[CMD_SIZE+1],
      command[CMD_SIZE+1],
      line[CMD_SIZE+1];  
;

int ipos=0;
  
void setup() {
  input[0], command[0] ='\0';
  Serial.begin(38400);
  matrix.begin();
  matrix.setTextWrap(false); // Allow text to run off right edge
}

void loop() {

  readCommand();
  if(doneScroll) {
    parseCommand();
  }
  if(screenElements>0) {
    updateScreen();
  }
//  printDebug(false,"loop");

}

boolean readCommand() {

  boolean commandComplete = false;
  
  if (Serial.available()) {
    char c = Serial.read();
    if ((c=='\n')||(c=='\r')) {
      strcpy(command,input);
      ipos=0;
      input[ipos]='\0';
      commandComplete = true ;
    } else {
      input[ipos++]=c;
      input[ipos]='\0';
      if (ipos==CMD_SIZE) ipos=0 ; //command to long. don't want to overrun the buffer;
    }
  }
  
  return(commandComplete);

}

boolean charTologo(char inChar, uint16_t **logo) {
  
  boolean rc=true;
  
  switch (inChar) {
    case '1':
      *logo=logo1;
      break;
    case '2':
      *logo=logo2;
      break;
    case '3':
      *logo=logo3;
      break;
    case '4':
      *logo=logo4;
      break;
    case '5':
      *logo=logo5;
      break;
    case '6':
      *logo=logo6;
      break;
    default:
      rc=false;
      break;
  }

  return(rc);
}

void parseCommand() {
  
  char cc = '\0';
  char *dataStart;
  int parseError=0;
  char color[] = "FFFFFF";  

  strcpy(line,command);

  uint8_t screenPos=0, linePos=0, lineMax=0, dataLen=0;
  
  screenElements=0;
  screenWidth=0;  
  lineMax=strlen(line);
  
  while ((line[linePos] != '\0')&&(!parseError)) {
    if ( (line[linePos] =='/') ){
      line[linePos]='\0';
      linePos++;
      cc=line[linePos];
      if (dataLen > 0) {
        screen[screenElements-1].data=dataStart;
        if (screen[screenElements-1].isPixmap) {
          if (!charTologo(screen[screenElements-1].data[0], &screen[screenElements-1].pixmap)) { 
              parseError = true;
              setScreen("bad logo index");
          }
          screenWidth=screenWidth+16;
        } else {
          if ( (screenElements > 1) && (screen[screenElements-1].x == screen[screenElements-2].x) ) {
            if ( strlen(screen[screenElements-1].data) > strlen(screen[screenElements-2].data) ) {
              screenWidth=screenWidth+( strlen(screen[screenElements-1].data) - strlen(screen[screenElements-2].data) )*(screen[screenElements-1].textSize*6);
            } 
          } else {
            screenWidth=screenWidth+strlen(screen[screenElements-1].data)*(screen[screenElements-1].textSize*6);
          }
        }
      }
      switch (cc) {
        case '0':
          dataLen = 0;
          screenElements++;
          screen[screenElements-1].color=hexStringtoColor("444444");
          screen[screenElements-1].x=screenWidth;
          screen[screenElements-1].y=0;
          screen[screenElements-1].textSize=2;
          screen[screenElements-1].isPixmap=false;  
          break;
        case '1':
          dataLen = 0;
          screenElements++;
          screen[screenElements-1].color=hexStringtoColor("444444");          
          if ( (screenElements > 1) && (screen[screenElements-2].textSize == 1) ) {
            screen[screenElements-1].x=screen[screenElements-2].x;
          } else {
            screen[screenElements-1].x=screenWidth;
          }
          screen[screenElements-1].y=0;
          screen[screenElements-1].textSize=1;
          screen[screenElements-1].isPixmap=false;  
          break;
        case '2':
          dataLen = 0;
          screenElements++;
          screen[screenElements-1].color=hexStringtoColor("444444");          
          if ( (screenElements > 1) && (screen[screenElements-2].textSize == 1) ) {
            screen[screenElements-1].x=screen[screenElements-2].x;
          } else {
            screen[screenElements-1].x=screenWidth;
          }
          screen[screenElements-1].y=8;
          screen[screenElements-1].textSize=1;
          screen[screenElements-1].isPixmap=false;  
          break;
        case '#':
          if ( linePos + 7 > lineMax ) {
            parseError = true;
            setScreen("bad color");
          } else {
            strncpy(color,&line[linePos+1],6);
            if (dataLen == 0) {
              screen[screenElements-1].color=hexStringtoColor(color);
            } else {
              dataLen = 0;
              screenElements++;
              screen[screenElements-1].color=hexStringtoColor(color);
              screen[screenElements-1].x=screenWidth;
              screen[screenElements-1].y=screen[screenElements-2].y;
              screen[screenElements-1].textSize=screen[screenElements-2].textSize;
              screen[screenElements-1].isPixmap=false;  
            }
            linePos=linePos+6;
          }
          break;
        case 'L':
        case 'l':        
          if ( linePos + 1 > lineMax ) {
            parseError = true;
            setScreen("no logo index");
          } else {
            dataLen = 1;
            screenElements++;
            screen[screenElements-1].color=0;
            screen[screenElements-1].x=screenWidth;
            screen[screenElements-1].y=0;
            screen[screenElements-1].textSize=2;
            screen[screenElements-1].isPixmap=true;
          }
          break;
        default:
          parseError = true;
          setScreen("bad command");
          break;
      }
      dataStart=&line[linePos+1];
    } else {
      dataLen++;
    }
    linePos++;
  }
  
  if ((! parseError)&&(screenElements)) {
    screen[screenElements-1].data=dataStart;
    if (screen[screenElements-1].isPixmap) {
      if (!charTologo(screen[screenElements-1].data[0], &screen[screenElements-1].pixmap)) { 
          parseError = true;
          setScreen("bad logo index");
      }
      screenWidth=screenWidth+16;
    } else {
      if ( (screenElements > 1) && (screen[screenElements-1].x == screen[screenElements-2].x) ) {
        if ( strlen(screen[screenElements-1].data) > strlen(screen[screenElements-2].data) ) {
          screenWidth=screenWidth+( strlen(screen[screenElements-1].data) - strlen(screen[screenElements-2].data) )*(screen[screenElements-1].textSize*6);
        } 
      } else {
        screenWidth=screenWidth+strlen(screen[screenElements-1].data)*(screen[screenElements-1].textSize*6);
      }
    }
  }
  
  if (DEBUG) {
    printDebug(true,"parsed");
    printScreen();
  }

}

void setScreen(char *message) {

  screenElements=1;
  screen[screenElements-1].x=0;
  screen[screenElements-1].y=0;
  screen[screenElements-1].textSize=1;
  screen[screenElements-1].color=hexStringtoColor("444444");
  screen[screenElements-1].isPixmap=false;  
  screen[screenElements-1].data=message;
  screenWidth=strlen(screen[screenElements-1].data)*(screen[screenElements-1].textSize*6);
  
}

void updateScreen() {
  scrollMessage();
}

void drawLogo(uint16_t *pixmap, int8_t x, int8_t y) {
  drawPixmap(pixmap, 16, 16, x, y);
}

void drawPixmap(uint16_t *pixmap, uint8_t width, uint8_t height, int8_t x, int8_t y) {

  uint8_t px, py;

  for(px=0;px<width;px++) {
    for(py=0;py<height;py++) {
      matrix.drawPixel(px+x,py+y,pixmap[px+py*width]);
    }  
  }  

}

uint16_t hexStringtoColor(char *instring) {

  uint8_t red = 0, grn = 0, blu = 0;
  char hexchar[]="FF";

  strncpy(hexchar, instring, 2);
  red=strtoul(hexchar,0,16);

  strncpy(hexchar, instring+2, 2);
  grn=strtoul(hexchar,0,16);
  
  strncpy(hexchar, instring+4, 2);
  blu=strtoul(hexchar,0,16);
  
  return(matrix.Color888(red,grn,blu));

}

void scrollMessage() {
  
  doneScroll=false;

  // Clear background
  matrix.fillScreen(0);

  if (DEBUG==2) Serial.println(scrollX);
  
  displayMessage(scrollX);

  // Move text left (w/wrap)
  if((--scrollX) < screenWidth * -1) {
    scrollX = matrix.width();
    doneScroll = true;
  }
  matrix.swapBuffers(false);
  // slow the scroll
  delay(scrollSpeed);

}

void displayMessage(int x) {

  // Rotate hue
  hue += 7;
  if(hue >= 1536) hue -= 1536;

  for (uint8_t i=0; i<screenElements; i++) {
    if (screen[i].isPixmap) {
      drawLogo(screen[i].pixmap, screen[i].x+x, screen[i].y);
    } else {
      matrix.setTextSize(screen[i].textSize);
      if (screen[i].color == 0) {
        matrix.setTextColor(matrix.ColorHSV(hue, 255, 255, true));
      } else {  
        matrix.setTextColor(screen[i].color);
      }
      matrix.setCursor(screen[i].x+x, screen[i].y);
      matrix.print(screen[i].data);
    }
  }

}

void printScreen() {

  if (screenElements || screenWidth) {
  
    Serial.print("screenElements: ");
    Serial.print(screenElements);
    Serial.print(" screenWidth:");
    Serial.println(screenWidth);  
    
    for (uint8_t i=0; i<screenElements; i++) {
      Serial.print("screenElement:");
      Serial.println(i);
      Serial.print("screen[screenElement].x:");
      Serial.println(screen[i].x);
      Serial.print("screen[screenElement].y:"); 
      Serial.println(screen[i].y); 
      Serial.print("screen[screenElement].color:");
      Serial.println(screen[i].color);
      Serial.print("screen[screenElement].textSize:");
      Serial.println(screen[i].textSize);
      Serial.print("screen[screenElement].isPixmap:");
      Serial.println(screen[i].isPixmap);
      Serial.print("screen[screenElement].data:");
      Serial.println(screen[i].data);
      Serial.print("command:");
      Serial.println(command);
    }
  }
}

void printDebug(uint8_t force, char * message) {

  if ( ( millis() > previousTime + 2000 ) || (force) ) {

    if (DEBUG) {

      Serial.print("# ");  
      Serial.print(message);        
      Serial.println(" #");  

      Serial.print("now=");
      Serial.print(millis());
      Serial.print(" freeMemory()=");
      Serial.println(freeMemory());

      Serial.println("#");  

    }
    previousTime = millis();
  }
}

